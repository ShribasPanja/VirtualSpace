/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Animated Human.glb -t -o src/components/AnimatedHuman.tsx -r public 
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import type { JSX } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'Human Armature|ArmatureAction.002' | 'Human Armature|Death' | 'Human Armature|Idle' | 'Human Armature|Jump' | 'Human Armature|Punch' | 'Human Armature|Run' | 'Human Armature|Walk' | 'Human Armature|Working'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Human_Mesh: THREE.SkinnedMesh
    Hips: THREE.Bone
  }
  materials: {
    Texture: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ModelProps = {
  scale?: number | [number, number, number]
  position?: [number, number, number]
} & JSX.IntrinsicElements['group']

export function Human(props: ModelProps) {
  const group = useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/models/Animated Human.glb') as unknown as GLTFResult
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  console.log(actions);
  const [animation, setAnimation] = useState<ActionName>("Human Armature|Run")
  useEffect(() => {
    actions[animation]?.reset().fadeIn(0.5).play();
    return () => {
      actions[animation]?.fadeOut(0.5);
      return undefined;
    }
  }, [actions, animation]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="Human_Armature" scale={69.183}>
            <primitive object={nodes.Hips} />
          </group>
          <skinnedMesh 
            name="Human_Mesh" 
            geometry={(nodes.Human_Mesh as THREE.SkinnedMesh).geometry}
            material={materials.Texture}
            skeleton={(nodes.Human_Mesh as THREE.SkinnedMesh).skeleton}
            scale={69.183} 
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/Animated Human.glb')
